n = int(input())
# n = 4

for i in range(1, 10):
    print(f'{n} * {i} = {n * i}')

"""
Скрипт выше написан в императивной парадигме программирования. В этой парадигме программа 
описывает последовательность команд, которые выполняются пошагово. В данном скрипте, команды выполняются в порядке их написания. Эта парадигма выбрана, потому что она проста и понятна, и подходит для решения данной задачи, которая требует выполнения цикла для вывода таблицы умножения.
"""
print('')

count = 1
while count <= 9:
    print(f'{n} * {count} = {n * count}')
    count += 1
"""
Скрипт выше написан в императивной парадигме программирования. В этой парадигме акцент делается на последовательности
 команд, которые изменяют состояние программы. Императивное программирование подразумевает явное указание, как 
 выполнять определенные операции и как изменять значения переменных. В данном скрипте используется цикл while для 
 повторения определенных команд. Выбор этой парадигмы может быть обусловлен требованием простоты и понятности кода,
 а также удобством для начинающих программистов.
"""

print('®')


def table(n, t):
    for i in range(1, t):
        print(f'{n} * {i} = {n * i}')


table(n, 10)


"""
Данный скрипт написан в императивной парадигме программирования. Использование именно этой парадигмы обусловлено 
простотой и понятностью кода, а также наглядностью выполнения последовательных операций. В императивной парадигме 
программист описывает шаги, необходимые для выполнения задачи, и контролирует поток выполнения программы.
"""